import sys
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QPushButton, QMessageBox
from PyQt5.QtCore import QSize

class Morpion(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Jeu de Morpion")
        self.setFixedSize(300, 300)
        self.initUI()

    def initUI(self):
        # Layout pour la grille
        self.layout = QGridLayout()
        self.setLayout(self.layout)

        # Création de la grille de jeu
        self.grid = [[None for _ in range(3)] for _ in range(3)]
        self.current_player = "X"

        for i in range(3):
            for j in range(3):
                button = QPushButton("")
                button.setFixedSize(QSize(80, 80))
                button.clicked.connect(lambda _, x=i, y=j: self.make_move(x, y))
                self.layout.addWidget(button, i, j)
                self.grid[i][j] = button

    def make_move(self, x, y):
        if self.grid[x][y].text() == "":
            # Remplir la case avec le symbole du joueur actuel
            self.grid[x][y].setText(self.current_player)

            # Vérifie si le joueur actuel a gagné
            if self.check_winner():
                QMessageBox.information(self, "Victoire", f"Le joueur {self.current_player} a gagné !")
                self.reset_game()
                return

            # Vérifie s'il y a égalité
            if self.is_draw():
                QMessageBox.information(self, "Égalité", "Match nul !")
                self.reset_game()
                return

            # Change de joueur
            self.current_player = "O" if self.current_player == "X" else "X"

    def check_winner(self):
        # Vérifie les lignes, colonnes et diagonales
        for i in range(3):
            if self.grid[i][0].text() == self.grid[i][1].text() == self.grid[i][2].text() != "":
                return True
            if self.grid[0][i].text() == self.grid[1][i].text() == self.grid[2][i].text() != "":
                return True
        if self.grid[0][0].text() == self.grid[1][1].text() == self.grid[2][2].text() != "":
            return True
        if self.grid[0][2].text() == self.grid[1][1].text() == self.grid[2][0].text() != "":
            return True
        return False

    def is_draw(self):
        # Vérifie si toutes les cases sont remplies
        for row in self.grid:
            for button in row:
                if button.text() == "":
                    return False
        return True

    def reset_game(self):
        # Réinitialise le jeu
        for row in self.grid:
            for button in row:
                button.setText("")
        self.current_player = "X"

# Point d'entrée du programme
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Morpion()
    window.show()
    sys.exit(app.exec_())
